#!/bin/bash
# Author: Linyos Torovoltos https://github.com/linyostorovovoltos
# Modifications: Alexander Epstein https://github.com/alexanderepstein

if [[ -d $HOME/.cache/ytview ]];then  rm -rf $HOME/.cache/ytview/ ;fi

player=""
configuredClient=""
currentVersion="1.9.0"
flag=""

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null ; then
    configuredClient="curl"
  elif command -v wget &>/dev/null ; then
    configuredClient="wget"
  elif command -v fetch &>/dev/null ; then
    configuredClient="fetch"
  else
    echo "Error: This tool reqires either curl, wget, or fetch to be installed."  >&2
    return 1
  fi
}

checkInternet()
{
  echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1 # query google with a get request
  if [ $? -eq 0 ]; then #check if the output is 0, if so no errors have occured and we have connected to google successfully
    return 0
  else
    echo "Error: no active internet connection" >&2 #sent to stderr
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl) curl -A curl -s "$@";;
    wget) wget -qO- "$@";;
    fetch) fetch -o "...";;
  esac
}

update()
{
  # Author: Alexander Epstein https://github.com/alexanderepstein
  # Update utility version 1.2.0
  # To test the tool enter in the defualt values that are in the examples for each variable
  repositoryName="Bash-Snippets" #Name of repostiory to be updated ex. Sandman-Lite
  githubUserName="alexanderepstein" #username that hosts the repostiory ex. alexanderepstein
  nameOfInstallFile="install.sh" # change this if the installer file has a different name be sure to include file extension if there is one
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]];then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]];then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == "Y" || "$answer" == "y" ]] ;then
        cd  ~ || { echo 'Update Failed' ; exit 1 ; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName  ||  { echo "Permissions Error: try running the update as sudo"; exit 1; } ; fi
        git clone "https://github.com/$githubUserName/$repositoryName" || { echo "Couldn't download latest version" ; exit 1; }
        cd $repositoryName ||  { echo 'Update Failed' ; exit 1 ;}
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        chmod a+x install.sh #this might be necessary in your case but wasnt in mine.
        ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName ||  { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory with sudo"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

getConfiguredPlayer()
{
  if [[ "$OSTYPE" == "linux"* ]];then
    if command -v vlc &>/dev/null;then
      player="vlc"
    elif  command -v mpv &>/dev/null;then
      player="mpv"
    elif command -v mplayer &>/dev/null;then
      player="mplayer"
    else
      echo "Error: no supported video player installed (vlc, mpv or mplayer)"  >&2
      return 1
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    if [[ -f /Applications/VLC.app/Contents/MacOS/VLC ]];then
      player="/Applications/VLC.app/Contents/MacOS/VLC"
    else
      echo "Error: vlc is not installed and it is required to play videos"  >&2
      return 1
    fi
  fi
}


# Get the video titles
channelview()
{

  mkdir -p $HOME/.cache/ytview/channels/$channel || return 1
  httpGet https://www.youtube.com/user/$channel/videos | grep "Duration" | awk '{print $10 " " $11 " " $12 " " $13 " " $14 " " $15 " " $16 " " $17 " " $18 " " $19 " " $20 " " $21 " " $22 " " $23 " " $24 " " $25 " " $26 " " $27 " " $29}' | sed 's/aria-describedby="description-id.*//' | sed s/title=// | sed 's/"//' | sed 's/"//' | awk '{printf "%s.\t%s\n",NR,$0}' > $HOME/.cache/ytview/channels/$channel/titles.txt || return 1

  # Get the video urls
  httpGet https://www.youtube.com/user/$channel/Videos | grep "watch?v=" | awk '{print $6}' | sed s/spf-link//  | sed s/href=// | sed 's/"//' | sed 's/"//' | sed '/^\s*$/d' | sed 's/\//https:\/\/www.youtube.com\//' |  awk '{printf "%s.\t%s\n",NR,$0}' > $HOME/.cache/ytview/channels/$channel/urls.txt || return 1


  # Print 20 first video titles for the user to choose from
  head -n 20 $HOME/.cache/ytview/channels/$channel/titles.txt || return 1
  # Prompt the user for video number
  read -p "Choose a video: " titlenumber



  # Play the video with your player
  $player $(grep $titlenumber  $HOME/.cache/ytview/channels/$channel/urls.txt | awk '{print $2}') > /dev/null 2>&1  & # grep is not needed here but I'm lazy
}

searchview()
{

  search=$(echo $search | tr " " + )
  mkdir -p $HOME/.cache/ytview/searches/$search

  #Get video titles
  httpGet https://www.youtube.com/results\?search_query\=$search | grep "Duration" | grep "watch?v="| awk '{print $13 " " $14 " " $15 " " $16 " " $17 " " $18 " " $19 " " $20 " " $21 " " $22 " " $23 " " $24 " " $25 " " $26 " " $27 " " $29}' | sed 's/aria-describedby="description-id.*//' | sed s/title=// | sed 's/"//' | sed 's/"//' | sed s/spf-link// | sed 's/data-sessionlink=itct*.//' |  sed s/spf-prefetch// | tail -n 17 | sed 's/rel="//' | sed 's/"//' | awk '{printf "%s.\t%s\n",NR,$0}' > $HOME/.cache/ytview/searches/$search/titles.txt || return 1

  #Get video urls
  httpGet https://www.youtube.com/results\?search_query\=$search | grep "watch?v=" | awk '{print $5}' | sed s/vve-check// | sed 's/href="/https:\/\/www.youtube.com/' | sed 's/"//' | sed s/class="yt-uix-tile-link"// |sed '/^\s*$/d' | awk '{printf "%s.\t%s\n",NR,$0}' > $HOME/.cache/ytview/searches/$search/urls.txt || return 1
  #Print 20 first video titles for the user to choose from
  head -n 20 $HOME/.cache/ytview/searches/$search/titles.txt || return 1

  #Let the user choose the video number
  read -p "Choose a video: " titlenumber

  #Play the video with your favorite player
  $player $(grep $titlenumber  $HOME/.cache/ytview/searches/$search/urls.txt | awk '{print $2}')  > /dev/null 2>&1 &



}

usage()
{
  echo "Usage: ytview [flag] [string] or ytview [videoToSearch]"
  echo "  -s Searches youtube"
  echo "  -c Shows the latest videos of a channel"
	echo "  -u Update Bash-Snippet Tools"
	echo "  -h Show the help"
	echo "  -v Get the tool version"
}

getConfiguredClient || exit 1
getConfiguredPlayer || exit 1
checkInternet || exit 1

while getopts uc:s:h*: option
do
  case "${option}" in
    s)
      if [[ $flag != "channel" ]];then
        search=$(printf '%s ' "$@")
        flag="search"
      else
        echo "Error: search and channel options are mutually exclusive" >&2
        exit 1
      fi
    ;;
    c)
      if [[ $flag != "search" ]];then
        channel="$OPTARG"
        flag="channel"
      else
        echo "Error: search and channel options are mutually exclusive" >&2
        exit 1
      fi
    ;;
    h) usage && exit 0 ;;
    u) update && exit 0 ;;
    *) usage && exit 0 ;;
  esac
done

if [[ $# == "0" ]]; then
  usage
  exit 0
elif [[ $1 == "help" ]];then
  usage
  exit 0
elif [[ $1 == "update" ]]; then
  update
  exit 0
elif [[ $flag == "search" ]]; then
  searchview || exit 1
elif [[ $flag == "channel" ]]; then
  channelview || exit 1
else
	search=$(printf '%s ' "$@")
  searchview || exit 1
fi
