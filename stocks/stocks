#!/usr/bin/env bash
# Author: Alexander Epstein https://github.com/alexanderepstein
# Author: Navan Chauhan https://github.com/navanchauhan
# Author: Tyler Stubenvoll https://github.com/tjstub
currentVersion="1.22.1"

########################################################################
## A simple sanity-check for internet.
########################################################################
checkInternet()
{
    # If you can reach github, you can probably reach elsewhere.
    if curl -A curl -s "https://github.com" > /dev/null 2>&1; then
        return 0
    else
        echo "Cannot verify internet connection" 1>&2
        return 1
    fi
}

########################################################################
## There is no point in running this tool if jq, curl isn't installed
## in addition, IEX cloud requires an API token, which is assumed
## to be stored in STOCKSIEXTOKEN.
stocksCheckPrereqs() {
    if ! command -v curl >/dev/null 2>&1; then
        echo "This command requires curl to be installed"
        return 1
    elif ! command -v jq > /dev/null 2>&1; then
        echo "This command requires jq to be installed"
        return 1
    elif [[ -z "$STOCKSIEXTOKEN" ]]; then
        echo "This command requires an IEX API Token to be set."
        echo "In your bashrc (or elsewhere) set:"
        echo "export STOCKSIEXTOKEN='<your_token>'"
        return 1
    fi
    return 0
}

########################################################################
## This function queries yahoo to determine the stock ticker for a
## certain company. This allows the usage of stocks to be extended
## such that now you can enter stocks "apple" and it will determine
## that the stock symbol for apple is AAPL.
getTicker()
{
    input="$(echo "$@" | tr " " +)"
    response="$(curl -A curl -s "http://d.yimg.com/autoc.finance.yahoo.com/autoc?query=${input}&region=1&lang=en%22")"
    symbol="$(echo "$response" | jq -r ".ResultSet.Result[0].symbol")"

    echo "$symbol"
}

########################################################################
## Gets stock information and prints it out.
## $1 = symbol
getStockInformation() {
    response="$(curl -A curl -s \
                     "https://cloud.iexapis.com/stable/stock/${1}/quote?token=${STOCKSIEXTOKEN}")"
    if ! echo "$response" | grep -q "companyName" > /dev/null 2>&1; then
        echo "Symbol does not exist"
        exit 1
    fi

    local name="$(echo "$response" | jq -r ".companyName")"
    local price="$(echo "$response" | jq ".latestPrice")"
    local high="$(echo "$response" | jq ".high")"
    local low="$(echo "$response" | jq ".low")"
    local open="$(echo "$response" | jq ".open")"
    local change="$(echo "$response" | jq ".change")"
    local changePercent="$(echo "$response" | jq ".changePercent")"
    local close="$(echo "$response" | jq ".close")"
    local latestVolume="$(echo "$response" | jq ".latestVolume")"
    local latestUpdate="$(echo "$response" | jq ".latestUpdate")"

    cat <<EOF

==============================================
$name -- Stock Information
==============================================
| * Symbol: $1
| * Latest Price: $price
| * Open: $open
| * High: $high
| * Low: $low
| * Close: $close
| * PriceChange: $change
| * PriceChangePercent: ${changePercent}%
| * Volume: $latestVolume
==============================================
| Last Updated: ${latestUpdate}
==============================================
EOF
}

usage()
{
    cat <<EOF

Stocks Usage
Description: Finds the latest information on a certain stock.
Usage: stocks [command || company/ticker]
  commands
  help    - print help message
  version - print version number
Examples:
  stocks AAPL
  stocks Tesla
Dependencies:
  This tool requires jq and curl.
  Your environment must have STOCKSIEXTOKEN set.
EOF

}

########################################################################
## Main
########################################################################
## These checks/commands do not require internet
if [[ "$#" -eq 0 ]]; then
    usage
    exit 1
elif [[ "$1" == "help" ]]; then
    usage
    exit 0;
elif [[ "$1" == "version" ]]; then
     echo "Version: ${currentVersion}"
     exit 0
elif ! stocksCheckPrereqs; then
    usage
    exit 1
fi

## The Following commands require net, so check for it.
checkInternet || exit 1

symbol="$(getTicker "$@")"
getStockInformation "$symbol"
exit 0
