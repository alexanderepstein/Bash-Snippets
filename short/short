#!/bin/bash
# Author: Alexander Epstein https://github.com/alexanderepstein

currentVersion="1.11.1"
configuredClient=""
configuredPython=""

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null ; then
    configuredClient="curl"
  elif command -v wget &>/dev/null ; then
    configuredClient="wget"
  elif command -v fetch &>/dev/null ; then
    configuredClient="fetch"
  else
    echo "Error: This tool reqires either curl, wget, or fetch to be installed."
    return 1
  fi

}


getConfiguredPython()
{
  if  command -v python2 &>/dev/null ; then
    configuredPython="python2"
  elif command -v python &>/dev/null ; then
    configuredPython="python"
  else
    echo "Error: This tool requires python 2 to be installed."
    return 1
  fi
}


python()
{
  case "$configuredPython" in
    python2) python2 "$@";;
    python) python "$@";;
  esac
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl) curl -A curl -s "$@";;
    wget) wget -qO- "$@";;
    fetch) fetch -o "...";;
  esac
}

checkInternet()
{
  httpGet "http://google.com" > /dev/null 2>&1
  if [ $? -eq 0 ]; then #check if the output is 0, if so no errors have occured and we have connected to google successfully
    return 0
  else
    echo "Error: no active internet connection" >&2 #sent to stderr
    return 1
  fi
}

update()
{
  # Author: Alexander Epstein https://github.com/alexanderepstein
  # Update utility version 1.2.0
  # To test the tool enter in the defualt values that are in the examples for each variable
  repositoryName="Bash-Snippets" #Name of repostiory to be updated ex. Sandman-Lite
  githubUserName="alexanderepstein" #username that hosts the repostiory ex. alexanderepstein
  nameOfInstallFile="install.sh" # change this if the installer file has a different name be sure to include file extension if there is one
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]];then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]];then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == "Y" || "$answer" == "y" ]] ;then
        cd  ~ || { echo 'Update Failed' ; exit 1 ; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName  ||  { echo "Permissions Error: try running the update as sudo"; exit 1; } ; fi
        git clone "https://github.com/$githubUserName/$repositoryName" || { echo "Couldn't download latest version" ; exit 1; }
        cd $repositoryName ||  { echo 'Update Failed' ; exit 1 ;}
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        chmod a+x install.sh #this might be necessary in your case but wasnt in mine.
        ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName ||  { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory with sudo"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

usage()
{
  echo "Short"
  echo "Description: Unmasks shortended urls."
  echo "Usage: short [shortURL] or short [flag]"
  echo "  -u Update Bash-Snippet Tools"
  echo "  -h Show the help"
  echo "  -v Get the tool version"
  echo "Example:"
  echo "   Input: short tinyurl.com/jhkj"
  echo "   Output: http://possiblemaliciouswebsiteornot.com"
}

expandURL()
{
  testURL=$( echo $1 | cut -c1-8 )
  if [[ $testURL != "https://" ]];then
    testURL=$( echo $1 | cut -c1-7 )
    if [[ $testURL != "http://" ]];then
      url="http://$1"
    else
      url=$1
    fi
  else
    url=$1
  fi
  response=$(httpGet http://x.datasig.io/short?url=$url)
  errorCheck=$(echo $response | python -c "import sys, json; print json.load(sys.stdin)['/short']['message']" 2>  /dev/null  )
  if [[ $errorCheck == "Error in /short" ]];then
  echo "Error: 404 could not find the website"
  return 1
fi
  expandedURL=$(echo $response | python -c "import sys, json; print json.load(sys.stdin)['/short']['destination']" 2>  /dev/null  )

}

printResults()
{
  echo "====================================================================="
  echo "Short URL: $url"
  echo "Expanded URL: $expandedURL"
  echo "====================================================================="
}

getConfiguredPython || exit 1
getConfiguredClient || exit 1
checkInternet || exit 1

while getopts "uvh" opt; do
  case $opt in
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
    ;;
    h)
      usage
      exit 0
    ;;
    v)
      echo "Version $currentVersion"
      exit 0
    ;;
    u)
      update
      exit 0
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
    ;;
  esac
done


if [[ $# == 0 ]]; then
  usage
  exit 0
elif [[ $# == "1" ]]; then
  if [[ $1 == "update" ]];then
    update
  elif [[ $1 == "help" ]]; then
    usage
  else
    expandURL $1 || exit 1
    printResults
  fi
else
  echo "Error: short only accepts one argument"
  exit 1
fi
